{"version":3,"sources":["webpack:///./src/components/Project.js","webpack:///./src/components/ProjectFooter.js","webpack:///./src/pages/Creatures.js"],"names":["Project","title","details","stack","link","purpose","tech","lessons","data","alt1","alt2","icon","stackComponents","map","index","key","className","style","display","thumbnail","src","allFile","edges","node","childImageSharp","fluid","alt","screenshot","console","log","ProjectContainer","HeaderContainer","DetailsContainer","ListContainer","LinkContainer","href","target","rel","Thumbnail","id","ImageContainer","Screenshot","StoryContainer","PurposeContainer","TechContainer","LessonsContainer","styled","div","Img","ProjectFooter","keyword","useStaticQuery","paintings","mindfulAlt","creaturesAlt","FooterContainer","FooterHeadline","FooterContent","ProjectAnchor","to","ProjectThumbnail","ProjectTitle","ProjectLink","Link","h3","Creatures"],"mappings":"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","file":"component---src-pages-creatures-js-a6a20cc60dbec1a2072e.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components';\nimport Img from 'gatsby-image';\nimport Puzzle from './Puzzle';\n\nimport 'fontsource-playfair-display/600.css';\nimport 'fontsource-open-sans';\n\nimport { CgPokemon } from 'react-icons/cg';\nimport { FaPeace } from 'react-icons/fa';\nimport { GiBattleship } from 'react-icons/gi';\n\nconst Project = ({ title, details, stack, link, purpose, tech, lessons, data, alt1, alt2, icon }) => {\n  const stackComponents = stack.map((tech, index) => {\n    return (\n      <li key={index}>\n        <CgPokemon className=\"list-o\" style={{ display: icon === 'creatures' ? 'inline-block' : 'none' }} />\n        <FaPeace className=\"list-o\" style={{ display: icon === 'mindful' ? 'inline-block' : 'none' }} />\n        <GiBattleship className=\"list-o\" style={{ display: icon === 'battleship' ? 'inline-block' : 'none' }} />\n        {tech}\n      </li>\n    )\n  });\n\n  const thumbnail = {\n    src: data.allFile.edges[1].node.childImageSharp.fluid.src,\n    fluid: data.allFile.edges[1].node.childImageSharp.fluid,\n    alt: alt1\n  };\n\n  const screenshot = {\n    src: data.allFile.edges[0].node.childImageSharp.fluid.src,\n    fluid: data.allFile.edges[0].node.childImageSharp.fluid,\n    alt: alt2\n  };\n\n  console.log('data', data)\n  \n  return (\n    <ProjectContainer>\n      <Puzzle />\n      \n      <HeaderContainer>\n        <h1>{title}</h1>\n        <p>{details}</p>\n      </HeaderContainer>\n\n      <DetailsContainer>\n        <ListContainer>\n          <h1>Technologies Used</h1>\n          <ul>\n            {stackComponents}\n          </ul>\n        </ListContainer>\n        \n        <LinkContainer>\n          <a href={link} target=\"_blank\" rel=\"noreferrer\">\n            <Thumbnail src={thumbnail.src} fluid={thumbnail.fluid} alt={thumbnail.alt} />\n          </a>\n          <a href={link} target=\"_blank\" rel=\"noreferrer\">\n            <span id=\"project-link\">View Live</span>\n          </a>\n        </LinkContainer>\n      </DetailsContainer>\n\n      <ImageContainer>\n        <Screenshot\n          fluid={screenshot.fluid}\n          src={screenshot.src}\n          alt={screenshot.alt}>\n        </Screenshot>\n      </ImageContainer>\n\n      <StoryContainer>\n        <PurposeContainer>\n          <h1>Project Inspiration and Purpose</h1>\n          <span id=\"purpose\">{purpose}</span>\n        </PurposeContainer>\n\n        <TechContainer>\n          <h1>The Tech that Made it Happen</h1>\n          <span id=\"tech\">{tech}</span>\n        </TechContainer>\n\n        <LessonsContainer>\n          <h1>Challenges and Lessons</h1>\n          <span id=\"lessons\">{lessons}</span>\n        </LessonsContainer>\n      </StoryContainer>\n    </ProjectContainer>\n  )\n}\n\nexport default Project\n\nconst ProjectContainer = styled.div`\n  display: block;\n  margin: 2rem 4rem;\n\n  @media screen and (max-width: 500px) {\n    margin: 2rem;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  margin: 2rem auto;\n  display: block;\n\n  h1 {\n    margin-bottom: 1rem;\n    font-family: 'Playfair Display', sans-serif;\n    color: #36434d;\n  }\n\n  p {\n    font-family: 'Open Sans', sans-serif;\n    width: 70%;\n    line-height: 1.5rem;\n    color: #828282;\n  }\n`\n\nconst DetailsContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst ListContainer = styled.div`\n  margin: 3rem auto 0 auto;\n  display: block;\n  width: 70%;\n\n  h1 {\n    font-family: 'Playfair Display', sans-serif;\n    color: #36434d;\n  }\n\n  ul {\n    margin: 2rem auto;\n    display: block;\n    font-family: 'Open Sans', sans-serif;\n    color: #828282;\n    width: 80%;\n  }\n\n  li {\n    list-style-type: none;\n  }\n\n  .list-o {\n    font-size: 1rem;\n    margin-right: 0.5rem;\n    color: #fecc27;\n  }\n`\n\nconst LinkContainer = styled.div`\n  text-align: center;\n  margin: 0 auto;\n  width: 100%;\n\n  a, a:link, a:visited {\n    color: #0070b7;\n    transition: border-bottom 0.3s ease 0;\n    text-decoration: none;\n  }\n\n  #project-link {\n    font-size: 1.5rem;\n  }\n\n  a:hover {\n    color: #48CEF7;\n    border-bottom: 2px solid #48CEF7;\n  }\n`\n\nconst Thumbnail = styled(Img)`\n  display: block;\n  margin: 0 auto 1.5rem auto;\n  border-radius: 5px;\n\n  @media screen and (max-width: 500px) {\n    width: 100%;\n  }\n`\n\nconst ImageContainer = styled.div`\n  margin: 4rem auto;\n  display: block;\n\n  @media screen and (max-width: 500px) {\n    display: none;\n  }\n`\n\nconst Screenshot = styled(Img)`\n  display: block;\n  margin: 0 auto;\n  width: 75%;\n`\n\nconst StoryContainer = styled.div`\n  display: block;\n  margin: 6rem auto;\n  width: 80%;\n\n  h1 {\n    font-family: 'Playfair Display', sans-serif;\n    color: #36434d;\n    margin: 2rem auto;\n    display: block;\n  }\n\n  span {\n    font-family: 'Open Sans', sans-serif;\n    color: #828282;\n    width: 60%;\n    max-width: 60%;\n    line-height: 1.5rem;\n  }\n`\n\nconst PurposeContainer = styled.div`\n  margin-bottom: 7rem;\n`\n\nconst TechContainer = styled.div`\n  margin-bottom: 7rem;\n`\n\nconst LessonsContainer = styled.div`\n  margin-bottom: 7rem;\n`","import React from 'react'\nimport styled from 'styled-components';\nimport { Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport 'fontsource-playfair-display/600.css';\nimport 'fontsource-open-sans';\n\nconst ProjectFooter = ({ keyword }) => {\n  const data = useStaticQuery(graphql`\n    query Paintings {\n      allFile(filter: {ext: {regex: \"/(jpg)|(png)|(jpeg)/\"}, \n        name: {in: [\"painting-0\", \"painting-1\", \"painting-2\", \"painting-3\"]}}) {\n        edges {\n          node {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const paintings = [...data.allFile.edges]; // === [frame, mindful, creatures, battleship, republic]\n\n  /*\n    BELOW: CHANGE 2 TO 3 (ON FLUID REASSIGNMENT)\n  */\n\n  const mindfulAlt = 'Peaceful image with black stones and bamboo in the background';\n  const creaturesAlt = 'Serene painting of a light blue sky, a grassy field, and the ocean in between';\n  const battleshipAlt = 'Painting of a submarine underwater';\n  const republicAlt = '';\n\n  // change battleship to republic\n  if (keyword === 'mindful') {\n    paintings[1].link = '/Creatures';\n    paintings[1].title = 'Creatures of Habit';\n    paintings[1].fluid = paintings[0].node.childImageSharp.fluid;\n    paintings[1].src = paintings[0].node.childImageSharp.fluid.src;\n    paintings[1].alt = creaturesAlt;\n\n    paintings[2].link = '/Battleship';\n    paintings[2].title = 'Battleship';\n    paintings[2].fluid = paintings[1].node.childImageSharp.fluid;\n    paintings[2].src = paintings[1].node.childImageSharp.fluid.src;\n    paintings[2].alt = republicAlt;\n  } else if (keyword === 'creatures') {\n    paintings[1].link = '/Mindful'\n    paintings[1].title = 'mindful.io';\n    paintings[1].fluid = paintings[2].node.childImageSharp.fluid;\n    paintings[1].src = paintings[2].node.childImageSharp.fluid.src;\n    paintings[1].alt = mindfulAlt;\n\n    paintings[2].link = '/Battleship';\n    paintings[2].title = 'Battleship';\n    paintings[2].fluid = paintings[1].node.childImageSharp.fluid;\n    paintings[2].src = paintings[1].node.childImageSharp.fluid.src;\n    paintings[2].alt = republicAlt;\n  } else if (keyword === 'battleship') {\n    paintings[1].link = '/Creatures';\n    paintings[1].title = 'Creatures of Habit';\n    paintings[1].fluid = paintings[0].node.childImageSharp.fluid;\n    paintings[1].src = paintings[0].node.childImageSharp.fluid.src;\n    paintings[1].alt = creaturesAlt;\n\n    paintings[2].link = '/Mindful';\n    paintings[2].title = 'mindful.io';\n    paintings[2].fluid = paintings[2].node.childImageSharp.fluid;\n    paintings[2].src = paintings[2].node.childImageSharp.fluid.src;\n    paintings[2].alt = battleshipAlt;\n  } else if (keyword === 'republic') {\n    paintings[1].link = '/Creatures';\n    paintings[1].title = 'Creatures of Habit';\n    paintings[1].fluid = paintings[0].node.childImageSharp.fluid;\n    paintings[1].src = paintings[0].node.childImageSharp.fluid.src;\n    paintings[1].alt = creaturesAlt;\n\n    paintings[2].link = '/Mindful';\n    paintings[2].title = 'mindful.io';\n    paintings[2].fluid = paintings[2].node.childImageSharp.fluid;\n    paintings[2].src = paintings[2].node.childImageSharp.fluid.src;\n    paintings[2].alt = mindfulAlt;\n  }\n\n  return (\n    <FooterContainer>\n      <FooterHeadline>\n        <h1>Check out my other projects</h1>\n      </FooterHeadline>\n\n      <FooterContent>\n        <ProjectContainer>\n          <ProjectAnchor to={paintings[1].link}>\n            <ProjectThumbnail \n              fluid={paintings[1].fluid}\n              src={paintings[1].src} \n              key={1} \n              alt={paintings[1].alt}\n              className=\"thumbnail\">\n            </ProjectThumbnail>\n          </ProjectAnchor>\n\n          <ProjectTitle>{paintings[1].title}</ProjectTitle>\n          <ProjectLink to={paintings[1].link}>View Project</ProjectLink>\n        </ProjectContainer>\n\n        <ProjectContainer>\n          <ProjectAnchor to={paintings[2].link}>\n            <ProjectThumbnail \n              fluid={paintings[2].fluid}\n              src={paintings[2].src} \n              key={2} \n              alt={paintings[2].alt}\n              className=\"thumbnail\">\n            </ProjectThumbnail>\n          </ProjectAnchor>\n\n          <ProjectTitle>{paintings[2].title}</ProjectTitle>\n          <ProjectLink to={paintings[2].link}>View Project</ProjectLink>\n        </ProjectContainer>\n      </FooterContent>\n    </FooterContainer>\n  )\n}\n\nexport default ProjectFooter\n\nconst FooterContainer = styled.div`\n  display: block;\n  margin: 0 7rem;\n\n  @media screen and (max-width: 500px) {\n    margin: 0 1rem;\n  }\n`\n\nconst FooterHeadline = styled.div`\n  font-family: 'Playfair Display', sans-serif;\n  color: #36434d;\n  margin: 2rem auto;\n  display: block;\n`\n\nconst FooterContent = styled.div`\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst ProjectContainer = styled.div`\n  margin: 2rem auto;\n  display: block;\n  text-align: center;\n  width: 100%;\n  font-family: 'Open Sans', sans-serif;\n  color: #828282;\n\n  @media screen and (max-width: 500px) {\n    width: 100%;\n    height: 100%;\n    margin: 4rem auto;\n  }\n`\n\nconst ProjectAnchor = styled(Link)`\n`\n\nconst ProjectThumbnail = styled(Img)`\n  width: 25rem;\n  height: 20rem;\n  margin: 0 auto;\n  border-radius: 5px;\n  box-shadow: 0 3px 8px black;\n  transition: transform 0.3s;\n  transition-timing-function: ease-in-out;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  @media screen and (max-width: 500px) {\n    width: 100%;\n    height: auto;\n  }\n`\n\nconst ProjectTitle = styled.h3`\n  margin: 2rem auto;\n`\n\nconst ProjectLink = styled(Link)`\n  color: #0070b7;\n  transition: border-bottom 0.3s ease 0;\n  text-decoration: none;\n\n  &:hover {\n    color: #48CEF7;\n    border-bottom: 2px solid #48cef7;\n  }\n`","import React from 'react'\nimport { useStaticQuery, graphql, useScrollRestoration } from 'gatsby';\n\nimport Project from '../components/Project';\nimport ProjectFooter from '../components/ProjectFooter';\nimport Footer from '../components/Footer';\nimport { GlobalStyle } from '../components/styles/GlobalStyle';\n\nconst Creatures = () => {\n  const data = useStaticQuery(graphql`\n    query MyCreatures {\n      allFile(filter: {ext: {regex: \"/(jpg)|(png)|(jpeg)/\"}, \n        name: {in: [\"creatures-0\", \"creatures-1\"]}}) {\n        edges {\n          node {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }      \n  `);\n\n  const details = `\n    The project that started it all. \n    I wanted a way to quantify areas of my life that are inherently qualitative (e.g., mental health, philosophy, etc.). \n    So I set out on learning to program from a background with zero prior experience or expertise, \n    and I ended up creating a \"full-stack\" web application that me and my friends use today.\n  `;\n\n  const stack = ['CSS', 'React', 'React Context API', 'NodeJS', 'Express', 'MongoDB', 'Heroku'];\n\n  const link = 'https://brandonzpb.github.io/creatures';\n\n  const purpose = `\n    After seeing so many \"Life RPG\" apps, I was inspired to make my own version that had all the features I wanted \n    that the others lacked. So the purpose of this app is to do just that: provide a nostalgic alternative \n    to apps that measure areas of your life the way a video game measures experience points and character evolution.\n  `;\n\n  const tech = `\n    I used React to create this project because it seemed like the best choice, with its packages, hooks, and state management. \n    I also used NodeJS and Express to create the server because I really enjoy building with JavaScript and I was eager to learn how to \n    make a \"full-stack\" web app with just one programming language. I also used MongoDB because of the scalable cloud services it provides. \n  `;\n\n  const lessons = `\n    The number of lessons I learned from this project alone is too many to detail in a simple paragraph! \n    Firstly, due to the complex structure of the \"creature\" objects, I learned a tremendous amount about the importance of refactoring code \n    and building a project that is clean and easy to maintain. \n    I also learned about the importance of writing unit tests before coding any of the project itself. \n    Another important concept I learned was the necessity of having a plan when designing any project: I learned what \n    works for me, how to mitigate my weaknesses, and make great use of my strengths. I used this plan when creating mindful.io.\n  `;\n\n  const alt1 = 'A serene painting of a light blue sky, a grassy field, and the ocean';\n  \n  const alt2 = `Screenshot of the Creatures of Habit app; \n    a Pokemon called Porygon with a nickname of duck.js has various habits, \n    such as studying and practing`;\n\n  return (\n    <>\n      <GlobalStyle />\n      <Project \n        title=\"Creatures of Habit\"\n        details={details}\n        stack={stack}\n        link={link}\n        purpose={purpose}\n        tech={tech}\n        lessons={lessons}\n        data={data}\n        alt1={alt1}\n        alt2={alt2}\n        icon=\"creatures\"\n      />\n      <ProjectFooter keyword=\"creatures\" />\n      <Footer />\n    </>\n  )\n}\n\nexport default Creatures\n"],"sourceRoot":""}